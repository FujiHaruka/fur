"use strict";

var path = require('path'),
    coz = require('coz'),
    glob = coz.ext.glob,
    format = require('util').format,
    extend = require('extend'),
    childProcess = require('child_process'),
    async = require('async'),
    string = require('stringcase'),
    fs = require('fs');

var pkg = require('../../package.json'),
    HandlebarsEngine = require('coz/lib/template/buildin_engines').HandlebarsEngine;

var engine = new HandlebarsEngine({});

var BANNER_SIZE = 128;

var TUTORIAL_BASE = 'https://github.com/okunishinishi/node-coz/blob/master/';

function _section(filename, data, callback) {
    async.waterfall([
        function (callback) {
            fs.readFile(filename, callback);
        },
        function (content, callback) {
            engine.compile(String(content), callback);
        },
        function (tmpl, callback) {
            if (!tmpl) {
                callback(null, null);
                return;
            }

            callback(null, {
                name: path.basename(filename, path.extname(filename)),
                content: tmpl({
                    usages: data.usages,
                    BANNER_SIZE: BANNER_SIZE,
                    pkg: pkg,
                    bannerExample: require('../examples/.banner-example.json'),
                    faviconExample: require('../examples/.favicon-example.json'),
                    get tutorials() {
                        return glob.sync(__dirname + '/../tutorial/*.md').map(function (filename) {
                            var name = path.basename(filename, path.extname(filename));
                            return {
                                name: name,
                                url: string.snakecase(name + '_url').replace(/__+/g, '_')
                            }
                        });
                    }

                }),
                get lines() {
                    return this.content.split('\n').map(function (content) {
                        return {
                            content: content,
                            isTopic: content.match(/^###[^#]/),
                            name: content.replace(/[#\?'"]/g, '').trim(),
                            title: content.replace(/^#+/g, '').trim()
                        }
                    });
                },
                get title() {
                    return this.lines.shift().content.trim();
                },
                get topics() {
                    return this.lines.filter(function (line) {
                        return line.isTopic;
                    })
                }

            });
        }
    ], callback);
}


function _sections(dirname, callback) {
    async.waterfall([
        function (callback) {
            fs.readdir(dirname, callback);
        },
        function (filenames, callback) {
            async.waterfall([
                function (callback) {
                    var furBin = require.resolve('../../bin/fur');
                    async.series([
                        function (callback) {
                            var command = [furBin, '-h'].join(' ');
                            childProcess.exec(command, callback);
                        },
                        function (callback) {
                            var command = [furBin, 'banner', '-h'].join(' ');
                            childProcess.exec(command, callback);
                        },
                        function (callback) {
                            var command = [furBin, 'favicon', '-h'].join(' ');
                            childProcess.exec(command, callback);
                        }
                    ], function (err, resuts) {
                        if (err) {
                            callback(err);
                        } else {
                            callback(null, {
                                all: resuts[0].shift(),
                                banner: resuts[1].shift(),
                                favicon: resuts[2].shift()
                            });
                        }
                    });
                },
                function (usages, callback) {
                    async.map(filenames.sort(), function (filename, callback) {
                        _section(path.resolve(dirname, filename), {
                            usages: usages
                        }, callback);
                    }, callback);
                }
            ], callback);
        }
    ], callback);
}


module.exports = function (callback) {
    async.waterfall([
        function (callback) {
            var dirname = path.resolve(__dirname, 'sections');
            _sections(dirname, callback);
        },
        function (sections) {
            callback(null, {
                force: true,
                mode: '444',
                data: {
                    pkg: pkg,
                    BANNER_SIZE: BANNER_SIZE,
                    links: require('./.links.json'),
                    badges: require('./.badges.json'),
                    banners: require('./.banners.json'),
                    sections: sections,
                    get tutorials() {
                        return glob.sync(__dirname + '/../tutorial/*.md').map(function (filename) {
                            var name = path.basename(filename, path.extname(filename));
                            return {
                                name: string.snakecase(name + '_url').replace(/__+/g, '_'),
                                url: TUTORIAL_BASE + encodeURI("docs/tutorial/" + name + '.md')
                            }
                        });
                    }
                }
            });
        }
    ], callback);
};

if (!module.parent) {
    coz.render(__filename);
}
